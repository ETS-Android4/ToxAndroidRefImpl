import java.security.MessageDigest

/**
 * [TRIfA], Gradle part of Tox Reference Implementation for Android
 * Copyright (C) 2017 Zoff <zoff@zoff.cc>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

buildscript {
    repositories {
        google()
        maven {
            url "https://jitpack.io"
        }
    }
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.2"
    compileOptions.encoding = 'UTF-8'
    // generatedDensities = []

    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['nativelibs']
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/*version'
        exclude 'META-INF/proguard/okhttp3.pro'
        exclude 'androidsupportmultidexversion.txt'
        //
        exclude 'kotlin/**'
        exclude 'kotlin/*'
        exclude 'kotlin'
        exclude 'META-INF/kotlin*'
        exclude 'META-INF/com.yariksoffice*'
        //
        exclude 'lib/armeabi/libRSSupport.so'
        exclude 'lib/armeabi/librsjni.so'
        exclude 'lib/armeabi/libsqlcipher.so'
        exclude 'lib/armeabi/libiocipher.so'
        exclude 'lib/armeabi/libspeex.so'
        exclude 'lib/armeabi/libblasV8.so'
        exclude 'lib/armeabi/librsjni_androidx.so'
        exclude 'lib/armeabi/libnative-audio-jni.so'
        exclude 'lib/armeabi'
        //
        // exclude 'lib/arm64-v8a/libRSSupport.so'
        // exclude 'lib/arm64-v8a/librsjni.so'
        // exclude 'lib/arm64-v8a/libsqlcipher.so'
        // exclude 'lib/arm64-v8a/libiocipher.so'
        // exclude 'lib/arm64-v8a/libspeex.so'
        // exclude 'lib/arm64-v8a/libblasV8.so'
        // exclude 'lib/arm64-v8a/librsjni_androidx.so'
        // exclude 'lib/arm64-v8a/libnative-audio-jni.so'
        // exclude 'lib/arm64-v8a/libjni-c-toxcore.so'
        // exclude 'lib/arm64-v8a'
        //
        exclude 'lib/mips64/libRSSupport.so'
        exclude 'lib/mips64/librsjni.so'
        exclude 'lib/mips64/libsqlcipher.so'
        exclude 'lib/mips64/libiocipher.so'
        exclude 'lib/mips64/libspeex.so'
        exclude 'lib/mips64/libblasV8.so'
        exclude 'lib/mips64/librsjni_androidx.so'
        exclude 'lib/mips64/libnative-audio-jni.so'
        exclude 'lib/mips64'
        //
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libsqlcipher.so'
        exclude 'lib/mips/libiocipher.so'
        exclude 'lib/mips/libspeex.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni_androidx.so'
        exclude 'lib/mips/libnative-audio-jni.so'
        exclude 'lib/mips'
        //
        // exclude 'lib/x86/libRSSupport.so'
        // exclude 'lib/x86/librsjni.so'
        // exclude 'lib/x86/libsqlcipher.so'
        // exclude 'lib/x86/libiocipher.so'
        // exclude 'lib/x86/libspeex.so'
        // exclude 'lib/x86/libblasV8.so'
        // exclude 'lib/x86/libnative-audio-jni.so'
        // exclude 'lib/x86/librsjni_androidx.so'
        // exclude 'lib/x86'
        //
        // exclude 'lib/x86_64/libRSSupport.so'
        // exclude 'lib/x86_64/librsjni.so'
        // exclude 'lib/x86_64/libsqlcipher.so'
        // exclude 'lib/x86_64/libiocipher.so'
        // exclude 'lib/x86_64/libspeex.so'
        // exclude 'lib/x86_64/libblasV8.so'
        // exclude 'lib/x86_64/librsjni_androidx.so'
        // exclude 'lib/x86_64/libnative-audio-jni.so'
        // exclude 'lib/x86_64'
        //
    }

    lintOptions {
        abortOnError false
        absolutePaths false
        // lintConfig file("lint.xml")
        showAll true
        textReport true
        xmlReport true
        htmlReport true
        textOutput file("lint-report.txt")
        htmlOutput file("lint-report.html")
        xmlOutput file("lint-report.xml")
    }

    compileOptions {
        encoding "UTF-8"
        // sourceCompatibility JavaVersion.VERSION_1_7
        // targetCompatibility JavaVersion.VERSION_1_7
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    defaultConfig {
        applicationId "com.zoffcc.applications.trifa"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 10059
        versionName "1.0.59"

        renderscriptTargetApi 26
        renderscriptSupportModeEnabled true
        // renderscriptSupportModeBlasEnabled true

        // Enabling multidex support
        multiDexEnabled true

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro',
                    'proguard-glide.pro',
                    //'proguard-mikepenz-android-iconics.pro',
                    //'proguard-rounded-image-view.pro',
                    'proguard-support-v7-appcompat.pro',
                    'proguard-gson.pro'
        }
        release {
            minifyEnabled false
            proguardFiles = buildTypes.debug.proguardFiles
            testProguardFile 'proguard-project-test.pro'
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // implementation project(':native-audio-jni')
    implementation project(path: ':native-audio-jni', configuration: 'default')
    //
    //
    implementation('com.mikepenz:materialdrawer:6.0.9@aar') {
        transitive = true
        exclude group: 'com.android.support'
        exclude group: 'com.github.bumptech.glide'
    }
    //
    implementation('com.mikepenz:google-material-typeface:3.0.1.3.original@aar') {
        exclude group: 'com.android.support'
    }
    implementation('com.mikepenz:fontawesome-typeface:5.0.13.0@aar') {
        exclude group: 'com.android.support'
    }
    implementation('com.mikepenz:material-design-iconic-typeface:2.2.0.5@aar') {
        exclude group: 'com.android.support'
    }
    implementation('com.google.zxing:core:3.3.3') {
        exclude group: 'com.android.support'
    }
    //
    implementation 'io.reactivex.rxjava2:rxjava:2.2.2'
    implementation('com.github.maskarade.android.orma:orma:6.0.2') {
        exclude group: 'io.reactivex'
        exclude group: 'com.android.support'
    }
    implementation('com.github.maskarade.android.orma:orma-encryption:6.0.2') {
        exclude group: 'io.reactivex'
        exclude group: 'com.android.support'
    }
    //
    implementation('com.github.hotchemi:permissionsdispatcher:3.2.0') {
        exclude group: 'com.android.support'
    }
    //
    implementation('com.github.angads25:filepicker:1.1.1') {
        exclude group: 'com.android.support'
    }
    //
    implementation('com.l4digital.fastscroll:fastscroll:1.1.2') {
        exclude group: 'com.android.support'
    }
    //
    implementation('com.vanniktech:emoji-ios:0.5.1') {
        exclude group: 'com.android.support'
    }
    //
    implementation('com.github.bumptech.glide:glide:4.11.0') {
        exclude group: 'com.android.support'
    }
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    //
    //
    //
    implementation 'com.zoffcc.applications.trifajni:trifa-jni-lib:1.0.51@aar'
    //
    //
    //
    //noinspection GradleCompatible
    implementation 'androidx.collection:collection:1.1.0'
    implementation 'androidx.core:core:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.fragment:fragment:1.2.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.preference:preference:1.1.1'
    androidTestImplementation 'androidx.multidex:multidex:2.0.1'
    androidTestImplementation 'androidx.multidex:multidex-instrumentation:2.0.0'
    implementation 'net.zetetic:android-database-sqlcipher:3.5.9@aar'
    implementation 'info.guardianproject.iocipher:IOCipher:0.5'
    implementation 'info.guardianproject.netcipher:netcipher:2.0.0-beta1'
    implementation 'info.guardianproject.netcipher:netcipher-okhttp3:2.0.0-alpha1'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.github.medyo:android-about-page:1.2.4'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'me.zhanghai.android.patternlock:library:2.1.2'
    implementation 'com.github.armcha:AutoLinkTextView:0.3.0'
    implementation 'com.github.chrisbanes:PhotoView:2.1.3'
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.daimajia.numberprogressbar:library:1.4@aar'
    implementation 'com.github.lawloretienne:discreteslider:0.0.9'
    implementation "com.github.YarikSOffice:lingver:1.3.0"
    annotationProcessor 'com.github.maskarade.android.orma:orma-processor:6.0.2'
    annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:3.2.0'
}

// --- gradle witness NG ---
// --- gradle witness NG ---
// --- gradle witness NG ---

// ----------------------------------------------------
//
// Zoff (c) in 2020
//
// run: "gradlew -q calculateChecksums"
// to generate/update the "witness.gradle" file
// ----------------------------------------------------

class DependencyKey implements Comparable<DependencyKey> {

    final String group, name, version, file, all

    DependencyKey(group, name, version, file) {
        this.group = group
        this.name = name
        this.version = version
        this.file = file
        all = "${group}:${name}:${version}:${file}".toString()
    }

    @Override
    boolean equals(Object o) {
        if (o instanceof DependencyKey) return ((DependencyKey) o).all == all
        return false
    }

    @Override
    int hashCode() {
        return all.hashCode()
    }

    @Override
    int compareTo(DependencyKey k) {
        return all <=> k.all
    }

    @Override
    String toString() {
        return "${group}:${name}:${version}"
    }
}

class ConfigurationInfo {

    final List<String> superConfigurations
    final List<String> dependencies

    ConfigurationInfo(List<String> superConfigurations, List<String> dependencies) {
        this.superConfigurations = superConfigurations
        this.dependencies = dependencies
    }
}

static String calculateSha256(File file) {
    MessageDigest md = MessageDigest.getInstance("SHA-256")
    file.eachByte 4096, { bytes, size ->
        md.update(bytes, 0, size)
    }
    return md.digest().collect { String.format "%02x", it }.join()
}

/**
 * Converts a file path into a DependencyKey, assuming the path ends with the elements
 * "group/name/version/sha1/file".
 * See https://docs.gradle.org/current/userguide/dependency_cache.html
 */
static DependencyKey makeKey(String path) {
    def parts = path.tokenize(System.getProperty('file.separator'))
    if (parts.size() < 5) throw new AssertionError()
    parts = parts.subList(parts.size() - 5, parts.size())
    return new DependencyKey(parts[0], parts[1], parts[2], parts[4])
}

static Map<DependencyKey, String> calculateHashes(Project project) {
    def excludedProp = project.properties.get('noWitness')
    def excluded = excludedProp == null ? [] : excludedProp.split(',')
    def projectPath = project.file('.').canonicalPath
    def dependencies = new TreeMap<DependencyKey, String>()
    def addDependencies = {
        // Skip excluded configurations and their subconfigurations
        def scopedName = "${project.name}:${it.name}"
        it.hierarchy.each {
            def superScopedName = "${project.name}:${it.name}"
            if (excluded.contains(it.name) || excluded.contains(superScopedName)) {
                println "Skipping excluded configuration ${scopedName}"
                return
            }
        }
        // Skip unresolvable configurations
        if (it.metaClass.respondsTo(it, 'isCanBeResolved') ? it.isCanBeResolved() : true) {
            it.fileCollection { dep ->
                // Skip dependencies on other projects
                dep.version != 'unspecified'
            }.each {
                // Skip files within project directory
                if (!it.canonicalPath.startsWith(projectPath)) {
                    def key = makeKey it.path
                    if (!dependencies.containsKey(key))
                        dependencies.put key, calculateSha256(it)
                }
            }
        }
    }
    project.configurations.each addDependencies
    project.buildscript.configurations.each addDependencies
    return dependencies
}

static Map<String, ConfigurationInfo> findDependencies(Project project) {
    def projectPath = project.file('.').canonicalPath
    def dependencies = new TreeMap<String, List<String>>()
    def addDependencies = {
        // Skip unresolvable configurations
        if (it.metaClass.respondsTo(it, 'isCanBeResolved') ? it.isCanBeResolved() : true) {
            def superConfigurations = new ArrayList<>()
            it.hierarchy.each { sup ->
                if (sup.name != it.name) superConfigurations.add(sup.name)
            }
            def configDependencies = new ArrayList<>()
            it.fileCollection { dep ->
                // Skip dependencies on other projects
                dep.version != 'unspecified'
            }.each {
                // Skip files within project directory
                if (!it.canonicalPath.startsWith(projectPath)) {
                    def hash = calculateSha256 it
                    configDependencies.add("${makeKey(it.path)}:${hash}".toString())
                }
            }
            Collections.sort configDependencies
            def key = "${project.name}:${it.name}".toString()
            def info = new ConfigurationInfo(superConfigurations, configDependencies)
            dependencies.put key, info
        }
    }
    project.configurations.each addDependencies
    project.buildscript.configurations.each addDependencies
    return dependencies
}


tasks.register("pinChecksums") {
    group = 'Verification'
    description = 'checks if binary downloads from maven have the correct checksums.'

    doLast {
        def dependencies = calculateHashes project
        project.dependencyVerification.verify.each { assertion ->
            def parts = assertion.tokenize(":")
            if (parts.size() != 5) {
                throw new InvalidUserDataException("Invalid or obsolete integrity assertion '${assertion}'")
            }
            def (group, name, version, file, expectedHash) = parts
            def key = new DependencyKey(group, name, version, file)
            println "Verifying ${key.all}"
            def hash = dependencies.get key
            if (hash == null) {
                throw new InvalidUserDataException("No dependency for integrity assertion '${assertion}'")
            }
            if (hash != expectedHash) {
                throw new InvalidUserDataException("Checksum failed for ${key.all}")
            }
        }
    }
}

project.task('calculateChecksums').doLast {
    group = 'Verification'
    description = 'prints checksums for dependencies that can be used later to pin those versions.'

    def dependencies = calculateHashes project
    println "dependencyVerification {"
    println "    verify = ["
    dependencies.each { dep -> println "        '${dep.key.all}:${dep.value}'," }
    println "    ]"
    println "}"
}

class WitnessPluginExtension {
    List verify
}
project.extensions.create("dependencyVerification", WitnessPluginExtension)
apply from: 'witness.gradle'

project.task('printDependencies').doLast {
    def dependencies = findDependencies project
    dependencies.each {
        println "${it.key}:"
        println "    superconfigurations:"
        it.value.superConfigurations.each { println "        ${it}" }
        println "    dependencies:"
        it.value.dependencies.each { println "        ${it}" }
    }
}

assemble.dependsOn pinChecksums
build.dependsOn pinChecksums

tasks.matching { task ->
    task.name.startsWith('assemble')
}.all { task ->
    task.dependsOn pinChecksums
}

// --- gradle witness NG ---
// --- gradle witness NG ---
// --- gradle witness NG ---
